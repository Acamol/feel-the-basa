#![windows_subsystem = "windows"]
/*!
    A very simple application that shows your name in a message box.
    Unlike `basic_d`, this example uses layout to position the controls in the window
*/


extern crate native_windows_gui as nwg;
extern crate native_windows_derive as nwd;

use nwd::NwgUi;
use nwg::NativeUi;
use std::cell::Cell;
use std::collections::VecDeque;


const ICON: [u8; 4060] = [0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 0xC6, 0x0F, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x04, 0x00, 0x00, 0x00, 0xF6, 0x7B, 0x60, 0xED, 0x00, 0x00, 0x0F, 0x8D, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0xED, 0x9D, 0x6D, 0x6C, 0x5C, 0xD5, 0x99, 0xC7, 0x7F, 0x33, 0x26, 0xCE, 0x8B, 0xED, 0x26, 0x4D, 0xD4, 0xE0, 0x84, 0x04, 0xE3, 0xA4, 0x6D, 0x4C, 0xB7, 0x10, 0x70, 0x12, 0x94, 0x38, 0x5B, 0xF8, 0xD2, 0x3A, 0x4A, 0xA0, 0xB4, 0x90, 0x95, 0x76, 0xA5, 0x15, 0x29, 0x5E, 0xA0, 0x95, 0x10, 0x74, 0x2B, 0xDA, 0x15, 0x44, 0x2A, 0x9F, 0xDA, 0x6D, 0xA1, 0xDA, 0xDD, 0xA2, 0x4A, 0x6D, 0x55, 0x2D, 0x0D, 0xEA, 0x9B, 0x84, 0x94, 0x97, 0x55, 0x61, 0x69, 0xEC, 0x26, 0xE9, 0x87, 0xA6, 0xD8, 0xEC, 0x2E, 0x4B, 0x95, 0x84, 0xC6, 0x36, 0x04, 0xA7, 0xC1, 0x24, 0xC1, 0x2C, 0xC9, 0x3A, 0xD8, 0xE3, 0x10, 0xBF, 0x4D, 0x3F, 0xD8, 0x71, 0x32, 0xF6, 0xBD, 0x67, 0xC6, 0xF7, 0x9E, 0x73, 0xEE, 0xB9, 0x73, 0x9E, 0xDF, 0xFD, 0x32, 0x33, 0xE7, 0xDE, 0xE7, 0x39, 0xCF, 0x33, 0xFF, 0x99, 0x3B, 0x73, 0xCF, 0xB9, 0xCF, 0xC9, 0xA0, 0x66, 0x29, 0x9F, 0xA2, 0x89, 0x5B, 0x59, 0xC5, 0x72, 0x6A, 0x98, 0x4F, 0x16, 0xC1, 0x75, 0xC6, 0xB9, 0xC8, 0x00, 0x67, 0xE8, 0xE1, 0x18, 0xAF, 0x70, 0x8C, 0xB3, 0xAA, 0x9D, 0x33, 0xA1, 0x2D, 0x73, 0x58, 0xCB, 0x36, 0x9A, 0x59, 0xC3, 0x22, 0xAE, 0x49, 0x3A, 0x26, 0x21, 0x12, 0x63, 0x5C, 0xE0, 0x04, 0xAD, 0xBC, 0xC8, 0x11, 0x46, 0x82, 0x77, 0x09, 0x16, 0x40, 0x96, 0x0D, 0xB4, 0xF0, 0x79, 0x96, 0x27, 0x1D, 0x81, 0xA0, 0x85, 0x33, 0xFC, 0x27, 0xBB, 0xF8, 0x1F, 0xC6, 0x67, 0x36, 0x05, 0x09, 0x60, 0x19, 0x5F, 0xE6, 0x41, 0x56, 0x24, 0xDD, 0x6B, 0x41, 0x2B, 0xA7, 0x79, 0x96, 0x9F, 0xCC, 0x3C, 0x1D, 0x54, 0xCC, 0xD8, 0xF1, 0x36, 0x7E, 0x40, 0x0B, 0x0B, 0x93, 0xEE, 0xAF, 0xA0, 0x99, 0x8F, 0x70, 0x3B, 0x6B, 0x39, 0xC1, 0x3B, 0x85, 0x2F, 0x17, 0x0A, 0x20, 0xC3, 0x17, 0xF9, 0x31, 0xB7, 0x29, 0x7E, 0x19, 0x08, 0xE9, 0x25, 0xC3, 0x6A, 0xEE, 0xE0, 0x1D, 0xBA, 0xAF, 0x7E, 0xB1, 0xA2, 0x60, 0x87, 0xBF, 0xE7, 0x19, 0xEA, 0x92, 0xEE, 0xA7, 0x60, 0x90, 0xC5, 0xDC, 0xCE, 0xBB, 0xBC, 0x7E, 0xE5, 0x85, 0xAB, 0x05, 0xF0, 0x45, 0x9E, 0x61, 0x59, 0xD2, 0x3D, 0x14, 0x0C, 0x53, 0xC3, 0x26, 0x7A, 0xE8, 0xBA, 0xFC, 0xF4, 0x8A, 0x00, 0x36, 0xF2, 0x63, 0xF9, 0xF4, 0x7B, 0x41, 0x0D, 0x8D, 0xFC, 0x37, 0xA7, 0x27, 0x9E, 0x5C, 0x16, 0xC0, 0x32, 0x7E, 0xC0, 0x86, 0xA4, 0x7B, 0x26, 0x58, 0x62, 0x09, 0x75, 0x1C, 0x60, 0x10, 0x2E, 0x0B, 0x20, 0xCB, 0xD7, 0xB9, 0x5F, 0x7E, 0xFA, 0x79, 0x44, 0x3D, 0x83, 0x1C, 0x26, 0xCF, 0xE4, 0xA5, 0xDD, 0x0D, 0x3C, 0x20, 0x17, 0x79, 0xBD, 0x22, 0xCB, 0x43, 0x13, 0xDF, 0xF8, 0x59, 0x60, 0x0E, 0xFF, 0x20, 0x97, 0x7D, 0xBC, 0x63, 0x05, 0x2D, 0xCC, 0x99, 0x10, 0xC0, 0x5A, 0xEE, 0x4A, 0xBA, 0x37, 0x42, 0x02, 0x7C, 0x9E, 0xB5, 0x13, 0x02, 0xB8, 0x4B, 0xAE, 0xF9, 0x7B, 0xC9, 0x72, 0xEE, 0x84, 0x2C, 0xD7, 0xD2, 0x9C, 0x74, 0x4F, 0x84, 0x84, 0x68, 0x66, 0x69, 0x96, 0x9B, 0x59, 0x93, 0x74, 0x3F, 0x84, 0x84, 0x58, 0xC3, 0x4D, 0x59, 0x36, 0xC9, 0xC0, 0x8F, 0xB7, 0x2C, 0x62, 0x53, 0x96, 0x9B, 0x02, 0x46, 0x04, 0x05, 0x3F, 0xA8, 0xE0, 0xE6, 0x2C, 0xAB, 0x93, 0xEE, 0x85, 0x90, 0x20, 0xAB, 0xB2, 0xF2, 0x0F, 0xC0, 0x6B, 0x96, 0x67, 0xA9, 0x4E, 0xBA, 0x0F, 0x42, 0x82, 0xD4, 0x64, 0x18, 0x93, 0x8B, 0xC0, 0x1E, 0x33, 0x9E, 0x21, 0x9F, 0x74, 0x1F, 0x84, 0x24, 0x91, 0x4F, 0xBF, 0xE7, 0x88, 0x00, 0x3C, 0x47, 0x04, 0xE0, 0x39, 0x22, 0x00, 0xCF, 0x11, 0x01, 0x78, 0x8E, 0x08, 0xC0, 0x73, 0x44, 0x00, 0x9E, 0x23, 0x02, 0xF0, 0x1C, 0x11, 0x80, 0xE7, 0x88, 0x00, 0x3C, 0xC7, 0x46, 0xE9, 0x87, 0x11, 0x4E, 0xF0, 0x2A, 0xBD, 0xC0, 0x4A, 0x36, 0xB0, 0x9A, 0x39, 0x9A, 0xED, 0x8F, 0x71, 0x8E, 0x93, 0xF4, 0xD0, 0x47, 0x0E, 0xA8, 0xA2, 0x96, 0x7A, 0xEA, 0x59, 0xA2, 0x7D, 0x9E, 0x43, 0xB9, 0xC4, 0x51, 0x80, 0x79, 0x01, 0x74, 0xF1, 0x43, 0x5E, 0xE0, 0x5D, 0x86, 0x81, 0x4A, 0x6A, 0xB9, 0x9B, 0x87, 0xB9, 0x51, 0x9B, 0xF5, 0x0B, 0xFC, 0x81, 0xFD, 0xB4, 0xF3, 0x36, 0x39, 0x3E, 0x9C, 0x7C, 0x6D, 0x1E, 0x55, 0xD4, 0xD1, 0xC4, 0x56, 0x9A, 0x58, 0x24, 0x71, 0x14, 0x23, 0x6F, 0x74, 0x3B, 0xCC, 0xFA, 0x19, 0x1E, 0x1B, 0xF9, 0xBD, 0x16, 0xDB, 0x39, 0x76, 0xB3, 0x95, 0x9A, 0xD0, 0xC8, 0x6A, 0x68, 0x66, 0x37, 0x83, 0x12, 0x87, 0x72, 0x33, 0xFA, 0xF6, 0x1F, 0x67, 0x5D, 0x60, 0x48, 0xEB, 0xE8, 0xD4, 0x60, 0xFB, 0xFE, 0x12, 0xE6, 0x32, 0x54, 0x73, 0x1F, 0xC7, 0x25, 0x8E, 0x64, 0x04, 0x30, 0xCC, 0x23, 0xA1, 0x01, 0x3D, 0xC2, 0x70, 0x2C, 0xDB, 0xAD, 0xDC, 0x5A, 0xF2, 0x77, 0xDC, 0x2D, 0xB4, 0x4A, 0x1C, 0x49, 0x08, 0xE0, 0x38, 0xD7, 0x87, 0x06, 0x73, 0x7D, 0xAC, 0xCF, 0xCE, 0x5E, 0x85, 0xE5, 0x20, 0xEA, 0xD8, 0x2B, 0x71, 0xD8, 0x17, 0xC0, 0xCF, 0xA9, 0x0C, 0x0D, 0xA5, 0x92, 0x5F, 0x44, 0xB6, 0xDB, 0x1A, 0xA1, 0x8E, 0x41, 0x1D, 0x6D, 0xDE, 0xC7, 0x11, 0xB8, 0x99, 0xBC, 0x0E, 0xD0, 0xCB, 0x70, 0x68, 0xDB, 0x30, 0xBD, 0x11, 0xAD, 0x76, 0xB2, 0x93, 0x53, 0xB3, 0x3E, 0xEA, 0x14, 0x3B, 0xE9, 0xF4, 0x3C, 0x8E, 0x40, 0x4C, 0x0A, 0x60, 0x44, 0xD9, 0x3A, 0x5C, 0xA2, 0x95, 0x42, 0x86, 0x78, 0x9A, 0x3F, 0x46, 0x3A, 0xF2, 0x35, 0xBE, 0xC7, 0x90, 0xD7, 0x71, 0x04, 0x62, 0x52, 0x00, 0xF9, 0x18, 0xAD, 0x61, 0xBC, 0xC4, 0xDE, 0xC8, 0xFD, 0xD9, 0xC3, 0x7E, 0xAF, 0xE3, 0x08, 0xC4, 0xA4, 0x00, 0x32, 0x31, 0x5A, 0x83, 0xE9, 0xE7, 0xA7, 0x13, 0x85, 0x4D, 0x22, 0x31, 0xC8, 0xB3, 0xF4, 0x7B, 0x1C, 0x47, 0x20, 0xE9, 0x1A, 0x0B, 0x78, 0x99, 0xF6, 0x44, 0x8F, 0x2F, 0xC3, 0x38, 0xD2, 0x24, 0x80, 0x31, 0x5A, 0x19, 0x88, 0x65, 0x61, 0x80, 0xFD, 0x8C, 0x25, 0x1D, 0x86, 0x5B, 0x71, 0xA4, 0x49, 0x00, 0xE7, 0x34, 0xE8, 0xBE, 0x9D, 0x73, 0x49, 0x87, 0xE1, 0x56, 0x1C, 0x69, 0x12, 0xC0, 0xC9, 0x08, 0x7F, 0x9B, 0xA6, 0x73, 0x8A, 0x3F, 0x27, 0x1D, 0x86, 0x5B, 0x71, 0xA4, 0x69, 0x25, 0x80, 0x1E, 0x72, 0xCA, 0xF6, 0x06, 0x9A, 0x81, 0xB6, 0xC2, 0x5A, 0xB8, 0xD3, 0xC8, 0xD1, 0xC3, 0x6D, 0x12, 0xC7, 0x15, 0xD2, 0x24, 0x80, 0xBE, 0xA9, 0x81, 0xD2, 0x20, 0x1A, 0x78, 0x8E, 0x8D, 0x40, 0x07, 0x2D, 0x8A, 0xD4, 0x5D, 0xA2, 0x2F, 0xE9, 0x30, 0xDC, 0x8A, 0x23, 0x4D, 0xA7, 0x00, 0xF5, 0xE7, 0xA6, 0x99, 0x8D, 0x00, 0x6C, 0x62, 0x8B, 0x62, 0xAF, 0x7C, 0x11, 0x2B, 0xDE, 0xC5, 0x91, 0x26, 0x01, 0x8C, 0x2A, 0x5B, 0x17, 0x07, 0x3C, 0x0A, 0x42, 0x7D, 0x5D, 0xCF, 0xBB, 0x38, 0xD2, 0x24, 0x00, 0x3D, 0xF7, 0x31, 0x27, 0x7F, 0x37, 0xB4, 0x53, 0x71, 0xA4, 0x49, 0x00, 0x7A, 0x6A, 0x19, 0x27, 0x5F, 0x11, 0xD9, 0xA9, 0x38, 0xD2, 0x24, 0x00, 0xC1, 0x00, 0x22, 0x00, 0xCF, 0x11, 0x01, 0x78, 0x8E, 0x08, 0xC0, 0x73, 0x44, 0x00, 0x9E, 0x23, 0x02, 0xF0, 0x1C, 0x11, 0x80, 0xE7, 0x88, 0x00, 0x3C, 0x47, 0x04, 0xE0, 0x39, 0x22, 0x00, 0xCF, 0x11, 0x01, 0x78, 0x8E, 0x08, 0xC0, 0x73, 0xD2, 0x24, 0x00, 0xA7, 0x46, 0xD1, 0x12, 0xEF, 0x81, 0x8C, 0x06, 0x26, 0x6A, 0x25, 0xF9, 0x1E, 0x78, 0x38, 0x1A, 0xA8, 0x9E, 0xBE, 0x76, 0x7E, 0xEA, 0x91, 0x7A, 0xBE, 0xAC, 0xEE, 0xC2, 0x2E, 0x29, 0x8F, 0x23, 0x4D, 0x02, 0xA8, 0x52, 0xB6, 0xB6, 0xD1, 0x01, 0x40, 0x07, 0x6D, 0x8A, 0xBD, 0x32, 0x45, 0xAC, 0x78, 0x17, 0x47, 0x9A, 0x26, 0x85, 0xD6, 0x32, 0x4F, 0x31, 0x9D, 0xB2, 0x9B, 0x16, 0xB6, 0x00, 0xAD, 0xBC, 0xA1, 0xB0, 0x31, 0x97, 0xDA, 0xA4, 0xC3, 0x70, 0x2B, 0x8E, 0x34, 0x09, 0xA0, 0x9E, 0x2A, 0xE5, 0x7C, 0xDA, 0x6E, 0xE5, 0x44, 0xEA, 0x09, 0xAA, 0xA9, 0x4F, 0x3A, 0x0C, 0xB7, 0xE2, 0x48, 0xD3, 0x29, 0xA0, 0x3E, 0x42, 0x41, 0x85, 0xE9, 0xD4, 0x39, 0x21, 0x00, 0x87, 0xE2, 0x48, 0x93, 0x00, 0x96, 0xD0, 0x14, 0xDB, 0x46, 0x53, 0x91, 0xB9, 0xB6, 0xDE, 0xC5, 0x91, 0x26, 0x01, 0x54, 0x28, 0x8B, 0xA9, 0x95, 0x42, 0x0D, 0x5B, 0x1D, 0x58, 0x26, 0xD3, 0xA9, 0x38, 0xD2, 0x24, 0x00, 0xD8, 0xCC, 0xE6, 0x98, 0xC7, 0xC7, 0xFF, 0xEC, 0x95, 0x59, 0x1C, 0xE9, 0xAA, 0x10, 0xB2, 0x90, 0x07, 0x62, 0xAC, 0x73, 0x58, 0xC3, 0x83, 0x91, 0xD6, 0x49, 0x2E, 0x97, 0x38, 0x02, 0x49, 0x57, 0x85, 0x10, 0xD8, 0xC6, 0xF6, 0xC8, 0xFD, 0xD9, 0xCE, 0x56, 0xAF, 0xE3, 0x08, 0xC4, 0xA4, 0x00, 0xD4, 0xD7, 0xAA, 0x2A, 0x4B, 0xB4, 0x52, 0xC8, 0x02, 0x9E, 0xA0, 0x31, 0xD2, 0x91, 0x8D, 0x3C, 0xCE, 0x02, 0xAF, 0xE3, 0x08, 0xC4, 0xA4, 0x00, 0x56, 0x2A, 0xEB, 0xEB, 0xAD, 0x8C, 0x68, 0xB5, 0x81, 0xEF, 0x46, 0xF8, 0x1B, 0x75, 0x03, 0x4F, 0xD1, 0xE0, 0x79, 0x1C, 0x21, 0x98, 0x2B, 0x14, 0xA9, 0xAA, 0xB0, 0x59, 0x17, 0xAB, 0xC2, 0xE6, 0xBE, 0x59, 0xA6, 0xEE, 0x06, 0xF6, 0x49, 0x1C, 0x21, 0x9B, 0x41, 0x01, 0x0C, 0xF3, 0x68, 0x68, 0x28, 0x8F, 0x32, 0x12, 0xCB, 0xF6, 0x81, 0x80, 0xEA, 0xDD, 0x61, 0x34, 0xC6, 0xAC, 0xAE, 0x59, 0x2E, 0x71, 0x58, 0x17, 0x40, 0x9E, 0xCE, 0x90, 0x2A, 0xDB, 0xEB, 0x35, 0x54, 0xD9, 0xEE, 0xA4, 0xA5, 0x84, 0x7F, 0xD3, 0xD5, 0xEC, 0xD0, 0xE2, 0xAB, 0x3C, 0xE2, 0xB0, 0x2E, 0x80, 0x3C, 0x87, 0xD9, 0x10, 0x90, 0xB6, 0xC3, 0x5A, 0x6C, 0xE7, 0xD8, 0xC3, 0x36, 0x6B, 0xEB, 0x05, 0x94, 0x47, 0x1C, 0x33, 0x36, 0xF3, 0xAB, 0x87, 0x77, 0xF1, 0x23, 0x7E, 0x3D, 0xB5, 0xD2, 0xC6, 0x32, 0xEE, 0xE6, 0x61, 0x8D, 0x3F, 0x63, 0x2E, 0xF0, 0x32, 0xFB, 0x69, 0xE7, 0x14, 0x39, 0x2E, 0x91, 0x07, 0x32, 0xCC, 0xA5, 0x7A, 0x72, 0xA5, 0x8D, 0x4D, 0x5A, 0x57, 0x0C, 0x29, 0x8F, 0x38, 0xA6, 0x61, 0x63, 0xF9, 0xF8, 0x11, 0xDE, 0x9A, 0x5A, 0x6B, 0x67, 0x3D, 0x1F, 0xD7, 0x3E, 0x02, 0x39, 0xC6, 0xF9, 0x82, 0xB5, 0x76, 0xAE, 0x65, 0x15, 0xF5, 0x2C, 0x36, 0xB0, 0x66, 0x50, 0x79, 0xC4, 0x51, 0x80, 0x0D, 0x01, 0x08, 0x0E, 0x93, 0xAE, 0xB1, 0x00, 0x41, 0x3B, 0x22, 0x00, 0xCF, 0x11, 0x01, 0x78, 0x8E, 0x08, 0xC0, 0x73, 0x44, 0x00, 0x9E, 0x23, 0x02, 0xF0, 0x1C, 0x11, 0x80, 0xE7, 0x88, 0x00, 0x3C, 0x47, 0x04, 0xE0, 0x39, 0x22, 0x00, 0xCF, 0x11, 0x01, 0x78, 0x8E, 0x08, 0xC0, 0x73, 0x44, 0x00, 0x9E, 0x63, 0xE3, 0xE6, 0xD0, 0x51, 0x72, 0x7C, 0xC8, 0x18, 0x50, 0xC1, 0x3C, 0xAA, 0x8C, 0xF9, 0xEC, 0x67, 0x08, 0x58, 0x60, 0x6E, 0xEC, 0xDC, 0x82, 0x0F, 0x5B, 0xB9, 0x9A, 0xC2, 0xAC, 0x83, 0x21, 0xBA, 0xE8, 0xE0, 0x08, 0x3D, 0xF4, 0x31, 0x48, 0x66, 0x72, 0x8C, 0xFB, 0x16, 0x36, 0xD2, 0xA0, 0x73, 0x6A, 0x33, 0x63, 0xFC, 0x2F, 0xFF, 0x41, 0x3B, 0xEF, 0x00, 0x2B, 0x68, 0xE2, 0x5E, 0x1A, 0xB5, 0x8F, 0xA2, 0x9B, 0xF6, 0x61, 0x2B, 0x57, 0x33, 0x30, 0x35, 0x19, 0xAC, 0x9F, 0xDD, 0xDC, 0x43, 0x6D, 0xC0, 0x49, 0x26, 0x4B, 0x2D, 0xF7, 0xF0, 0x3C, 0xFF, 0xAF, 0xC9, 0xD3, 0x00, 0x4F, 0x71, 0x5D, 0x81, 0x87, 0xEB, 0xF8, 0x0E, 0x1F, 0x68, 0x8D, 0xC6, 0xAC, 0x0F, 0x7B, 0xB9, 0x9A, 0xB9, 0x19, 0x31, 0x3A, 0xCA, 0x21, 0xEE, 0x2C, 0xA2, 0xDB, 0xF9, 0x6C, 0xE3, 0xB7, 0x8C, 0xC6, 0xF6, 0x35, 0xC4, 0xE3, 0xCC, 0x9D, 0x61, 0xBD, 0x92, 0x27, 0xB8, 0xA8, 0x2D, 0x1E, 0x93, 0x3E, 0x6C, 0xE6, 0xCA, 0x92, 0x00, 0xFA, 0xF9, 0x67, 0xAE, 0x2D, 0xE9, 0xDB, 0x67, 0x29, 0xDF, 0xA6, 0x3F, 0xA6, 0xB7, 0x5F, 0x86, 0x14, 0x4B, 0xA9, 0xE6, 0x97, 0xDA, 0x22, 0x32, 0xE7, 0xC3, 0x6E, 0xAE, 0xAC, 0x08, 0xE0, 0x5D, 0x1E, 0x98, 0x45, 0x01, 0xA3, 0x39, 0x3C, 0x48, 0x5F, 0x0C, 0x6F, 0xEF, 0xF3, 0xD7, 0xA1, 0xB6, 0x3F, 0xC3, 0xFB, 0x5A, 0x22, 0x32, 0xE7, 0xC3, 0x6E, 0xAE, 0xAC, 0x08, 0xE0, 0xFF, 0xB8, 0x6F, 0x96, 0xB7, 0x4B, 0x66, 0xD8, 0x11, 0x23, 0x89, 0x07, 0xF8, 0x48, 0xA8, 0xE5, 0x85, 0x1C, 0xD4, 0x12, 0x93, 0x29, 0x1F, 0xB6, 0x73, 0x65, 0x41, 0x00, 0x17, 0xF9, 0x5A, 0x84, 0x2B, 0x0B, 0x15, 0x3C, 0x16, 0xF9, 0x5C, 0xFA, 0x8C, 0x32, 0x5D, 0xCF, 0x68, 0x89, 0xCA, 0x8C, 0x0F, 0xFB, 0xB9, 0x0A, 0xDC, 0xF4, 0x5E, 0x08, 0x7A, 0x9E, 0x7F, 0x67, 0x7C, 0xD6, 0x47, 0x8D, 0xF1, 0x13, 0x9E, 0x8F, 0xE8, 0xF1, 0x82, 0xA2, 0x2D, 0xAF, 0x6C, 0x4D, 0xDA, 0x87, 0xFD, 0x5C, 0x05, 0xA2, 0x53, 0x00, 0xDD, 0xFC, 0x4B, 0xC4, 0x05, 0x4D, 0x73, 0xFC, 0xAB, 0xB2, 0x28, 0x5A, 0x38, 0xE3, 0x31, 0x5A, 0x93, 0xF4, 0x91, 0x44, 0xAE, 0x02, 0xD1, 0x27, 0x80, 0x71, 0x76, 0xF1, 0xA7, 0xC8, 0x47, 0xBF, 0xCE, 0x73, 0x91, 0x52, 0x69, 0xA2, 0x78, 0x83, 0x79, 0x1F, 0xC9, 0xE4, 0x2A, 0x10, 0x7D, 0x02, 0xE8, 0x66, 0x6F, 0xAC, 0xE3, 0x77, 0xEB, 0xD4, 0xB5, 0xE3, 0x38, 0x94, 0x2B, 0x7D, 0x02, 0x68, 0xE3, 0x64, 0xAC, 0xE3, 0x4F, 0x2A, 0x4B, 0xA3, 0x96, 0x17, 0x0E, 0xE5, 0x4A, 0x97, 0x00, 0x72, 0x1C, 0x8A, 0xF9, 0xB5, 0x34, 0xCE, 0x21, 0x07, 0x96, 0x76, 0xB7, 0x81, 0x53, 0xB9, 0xD2, 0x25, 0x80, 0xB3, 0x1C, 0x8B, 0x6D, 0xE3, 0x28, 0x67, 0x35, 0xF5, 0xC6, 0x6D, 0x9C, 0xCA, 0x95, 0x2E, 0x01, 0xBC, 0x79, 0x55, 0x99, 0xF3, 0x20, 0x2A, 0x58, 0xCA, 0xD2, 0x22, 0xA3, 0x67, 0xE7, 0x39, 0xA1, 0xA9, 0x37, 0x6E, 0xE3, 0x54, 0xAE, 0x74, 0x09, 0xA0, 0x97, 0x21, 0x45, 0xEB, 0x02, 0xBE, 0xCE, 0x21, 0x0E, 0xF1, 0x98, 0x72, 0xD0, 0xE3, 0x22, 0xBD, 0x9A, 0x7A, 0xE3, 0x36, 0x4E, 0xE5, 0x4A, 0xD7, 0x7C, 0x80, 0x7E, 0xC6, 0x14, 0xAD, 0x9F, 0xE3, 0x49, 0xAA, 0x81, 0x27, 0xE9, 0xE6, 0x85, 0xD0, 0xBD, 0x46, 0xE9, 0xD7, 0xD4, 0x1B, 0xB7, 0x71, 0x2A, 0x57, 0xBA, 0xBE, 0x01, 0x3E, 0x54, 0xB6, 0xDE, 0x34, 0x59, 0x17, 0xB3, 0x86, 0x9B, 0x95, 0xFB, 0x5D, 0xD4, 0xD4, 0x1B, 0xB7, 0x71, 0x2A, 0x57, 0xBA, 0x04, 0xA0, 0xFE, 0x55, 0x7B, 0x4D, 0xC0, 0xA3, 0xD9, 0x5B, 0x29, 0x17, 0x9C, 0xCA, 0x95, 0x2E, 0x01, 0x38, 0xB5, 0x10, 0x92, 0xE3, 0x38, 0x95, 0x2B, 0x99, 0x15, 0xEC, 0x39, 0x22, 0x00, 0xCF, 0x11, 0x01, 0x78, 0x8E, 0x08, 0xC0, 0x73, 0x44, 0x00, 0x9E, 0x23, 0x02, 0xF0, 0x1C, 0x11, 0x80, 0xE7, 0x88, 0x00, 0x3C, 0x47, 0x04, 0xE0, 0x39, 0x22, 0x00, 0xCF, 0x11, 0x01, 0x78, 0x8E, 0x08, 0xC0, 0x73, 0x44, 0x00, 0x9E, 0xA3, 0x4B, 0x00, 0x7A, 0x56, 0x1D, 0xF0, 0x63, 0xED, 0x02, 0xA7, 0x72, 0xA5, 0x4B, 0x00, 0x6A, 0x3B, 0xA3, 0x01, 0x8F, 0x4C, 0xF6, 0xC6, 0x6D, 0x9C, 0xCA, 0x95, 0xAE, 0x94, 0xCF, 0x53, 0xB6, 0x1E, 0x63, 0x00, 0x80, 0x01, 0x8E, 0x2A, 0xF7, 0x9B, 0xAF, 0xA9, 0x37, 0x6E, 0xE3, 0x54, 0xAE, 0x74, 0xCD, 0x09, 0x5C, 0x44, 0x85, 0x62, 0xA6, 0xDB, 0x01, 0xBE, 0xC5, 0x0E, 0xE0, 0x67, 0x1C, 0x54, 0xF6, 0x65, 0x91, 0xA6, 0xDE, 0xB8, 0x8D, 0x53, 0xB9, 0xD2, 0x25, 0x80, 0x95, 0x2C, 0x98, 0x54, 0x6E, 0x10, 0x43, 0xFC, 0x1B, 0x3F, 0x03, 0xCE, 0x29, 0xA7, 0x43, 0xCE, 0x57, 0xAC, 0xD0, 0x59, 0x4E, 0x38, 0x95, 0x2B, 0x5D, 0x02, 0xF8, 0x04, 0x8B, 0x15, 0x41, 0xC1, 0x18, 0xEF, 0x15, 0xB5, 0xB1, 0x98, 0xD5, 0x9A, 0x7A, 0xE3, 0x36, 0x4E, 0xE5, 0x4A, 0xD7, 0x6F, 0x80, 0x65, 0xDC, 0x14, 0xDB, 0xC6, 0xCD, 0x2C, 0xD3, 0xD4, 0x1B, 0xB7, 0x71, 0x2A, 0x57, 0xBA, 0x04, 0x50, 0xC5, 0x67, 0x63, 0xDA, 0xCA, 0xF2, 0xD9, 0x90, 0x52, 0x4C, 0xE5, 0x86, 0x53, 0xB9, 0xD2, 0xF7, 0xC7, 0x6B, 0x0B, 0xAB, 0x62, 0x1D, 0xBF, 0x8A, 0x66, 0x6D, 0x7D, 0x71, 0x1D, 0x87, 0x72, 0xA5, 0x4F, 0x00, 0x9F, 0x64, 0x7B, 0xAC, 0xE3, 0xFF, 0x86, 0x4F, 0x6A, 0xEB, 0x8B, 0xEB, 0x38, 0x94, 0x2B, 0x7D, 0x02, 0xC8, 0xD2, 0xC2, 0x5F, 0x45, 0x3E, 0xFA, 0xD3, 0xB4, 0x44, 0xEA, 0x4B, 0x3E, 0x46, 0x6B, 0x72, 0x3E, 0x92, 0xC9, 0x55, 0x48, 0x57, 0xF4, 0xB1, 0x86, 0x6F, 0x4C, 0xDE, 0xD6, 0x34, 0x5B, 0xAA, 0xF9, 0x46, 0x44, 0x4D, 0x67, 0x63, 0xB4, 0x26, 0xE9, 0x23, 0x89, 0x5C, 0x69, 0xEC, 0x7E, 0x18, 0x7F, 0xC7, 0x43, 0x11, 0x0A, 0x28, 0x57, 0xF0, 0x15, 0xFE, 0x36, 0xA2, 0xC7, 0x85, 0x8A, 0xB6, 0x8C, 0xB2, 0x35, 0x69, 0x1F, 0xF6, 0x73, 0x15, 0x82, 0xDE, 0xB2, 0x83, 0xEF, 0xB3, 0x63, 0xD6, 0xC5, 0x0F, 0xBF, 0x14, 0xA3, 0xF8, 0xE1, 0x41, 0xC5, 0x1B, 0xB0, 0x90, 0x43, 0x5A, 0x62, 0x32, 0xE5, 0xC3, 0x76, 0xAE, 0x82, 0x37, 0xCD, 0xE6, 0xF2, 0xF4, 0xF1, 0xE5, 0x80, 0xC2, 0xCA, 0x61, 0xCC, 0xE1, 0xA1, 0x98, 0xA5, 0x62, 0x3F, 0x13, 0x6A, 0xFB, 0x76, 0x6D, 0xA5, 0x62, 0x4D, 0xF9, 0xB0, 0x9B, 0x2B, 0x4B, 0x02, 0xC8, 0xF3, 0x01, 0x4F, 0x97, 0x5C, 0x00, 0xF9, 0x3B, 0xB1, 0x0B, 0x20, 0xFF, 0x2A, 0xE4, 0x5C, 0x5A, 0xCD, 0xAF, 0xB4, 0x45, 0x64, 0xCE, 0x87, 0xDD, 0x5C, 0x59, 0x12, 0x40, 0x9E, 0x51, 0x7E, 0xC7, 0x5D, 0x45, 0x2E, 0x55, 0xCC, 0xE7, 0x4E, 0x4D, 0xE5, 0xE2, 0x9F, 0x08, 0x2C, 0xE5, 0xBE, 0x53, 0x6B, 0xB9, 0x78, 0x73, 0x3E, 0x6C, 0xE6, 0xCA, 0x9A, 0x00, 0xF2, 0xE4, 0xE9, 0x67, 0x0F, 0xF7, 0x06, 0x2E, 0x82, 0x50, 0xC1, 0x32, 0xEE, 0xD5, 0xBC, 0x60, 0xC4, 0x8A, 0x02, 0x0F, 0x2B, 0x78, 0x8A, 0x01, 0xAD, 0xD1, 0x98, 0xF5, 0x61, 0x2F, 0x57, 0x33, 0xB6, 0x0C, 0x26, 0x67, 0xE1, 0x0C, 0xD1, 0xC5, 0x2B, 0x1C, 0xE1, 0x2D, 0xFA, 0xC8, 0x01, 0x55, 0xD4, 0x4E, 0x2E, 0x83, 0xB2, 0x46, 0xF3, 0x92, 0x31, 0xAF, 0xB1, 0x8F, 0x0E, 0x7A, 0x81, 0x95, 0x34, 0x71, 0x0F, 0xEB, 0xB4, 0x4F, 0x2E, 0x31, 0xED, 0xC3, 0x56, 0xAE, 0xA6, 0x61, 0x56, 0x00, 0x13, 0x8C, 0x92, 0xE3, 0x12, 0xA3, 0xC0, 0x35, 0xCC, 0x95, 0x45, 0xA3, 0x94, 0xD8, 0xCA, 0xD5, 0x14, 0x36, 0x04, 0x20, 0x38, 0x8C, 0x1F, 0xB3, 0xF0, 0x84, 0x50, 0x44, 0x00, 0x9E, 0x23, 0x02, 0xF0, 0x1C, 0x11, 0x80, 0xE7, 0x88, 0x00, 0x3C, 0x47, 0x04, 0xE0, 0x39, 0x22, 0x00, 0xCF, 0x11, 0x01, 0x78, 0x8E, 0x08, 0xC0, 0x73, 0x44, 0x00, 0x9E, 0x23, 0x02, 0xF0, 0x1C, 0x11, 0x80, 0xE7, 0x88, 0x00, 0x3C, 0xC7, 0xF8, 0x70, 0x23, 0x30, 0xC2, 0x09, 0x5E, 0x9D, 0x1C, 0x47, 0xDF, 0xC0, 0xEA, 0x59, 0x2C, 0x98, 0x5E, 0x1A, 0x63, 0x9C, 0xE3, 0x24, 0x3D, 0x57, 0x8D, 0xA3, 0xD7, 0x53, 0xCF, 0x92, 0x08, 0x73, 0x6E, 0x93, 0xF5, 0x61, 0x23, 0x57, 0x33, 0x30, 0x2F, 0x80, 0x2E, 0x7E, 0xC8, 0x0B, 0xBC, 0xCB, 0x30, 0x50, 0x49, 0x2D, 0x77, 0xF3, 0x30, 0x37, 0x6A, 0xB3, 0x7E, 0x81, 0x3F, 0xB0, 0x9F, 0x76, 0xDE, 0x26, 0x37, 0xB5, 0x14, 0xCB, 0x3C, 0xAA, 0xA8, 0xA3, 0x89, 0xAD, 0x34, 0x69, 0x19, 0xB7, 0xB7, 0xE1, 0xC3, 0x46, 0xAE, 0x42, 0x30, 0x35, 0x25, 0x6C, 0x62, 0x3B, 0xCC, 0xFA, 0x19, 0x1E, 0x1B, 0xF9, 0xBD, 0x16, 0xDB, 0x39, 0x76, 0xB3, 0x95, 0x9A, 0xD0, 0xC8, 0x6A, 0x68, 0x66, 0x37, 0x83, 0xCE, 0xFB, 0xB0, 0x91, 0xAB, 0xF0, 0xCD, 0xA8, 0xF1, 0xE3, 0xAC, 0x0B, 0x4C, 0xDB, 0x3A, 0x3A, 0x35, 0xD8, 0xBE, 0xBF, 0x84, 0x7B, 0x6B, 0xAA, 0xB9, 0x8F, 0xE3, 0x4E, 0xFB, 0xB0, 0x91, 0xAB, 0x84, 0x04, 0x30, 0xCC, 0x23, 0xA1, 0x49, 0x7B, 0x84, 0xE1, 0x58, 0xB6, 0x5B, 0xB9, 0xB5, 0xE4, 0xEF, 0xB8, 0x5B, 0x68, 0x75, 0xD6, 0x87, 0x8D, 0x5C, 0x25, 0x26, 0x80, 0xE3, 0x8A, 0x32, 0x26, 0xD7, 0xC7, 0xD2, 0xF5, 0xDE, 0x59, 0x16, 0x48, 0xA9, 0x63, 0xAF, 0x93, 0x3E, 0x6C, 0xE4, 0x2A, 0x41, 0x01, 0xFC, 0x9C, 0xCA, 0xD0, 0xA0, 0x2A, 0xF9, 0x45, 0x64, 0xBB, 0xAD, 0xD4, 0xCD, 0xEA, 0xAD, 0x99, 0x78, 0x7B, 0xDA, 0x9C, 0xF3, 0x61, 0x23, 0x57, 0x45, 0x37, 0x93, 0xD7, 0x01, 0x7A, 0x19, 0x0E, 0x6D, 0x1B, 0x8E, 0xBC, 0xF4, 0x69, 0x27, 0x3B, 0x39, 0x35, 0xEB, 0xA3, 0x4E, 0xB1, 0x93, 0x4E, 0xA7, 0x7C, 0x14, 0x62, 0x26, 0x57, 0x25, 0x60, 0x52, 0x00, 0x23, 0xCA, 0xD6, 0xE1, 0x12, 0xAD, 0x14, 0x32, 0xC4, 0xD3, 0xFC, 0x31, 0xD2, 0x91, 0xAF, 0xF1, 0x3D, 0xE5, 0x9A, 0xBD, 0x76, 0x7D, 0x4C, 0xC7, 0x44, 0xAE, 0x4A, 0xC2, 0xA4, 0x00, 0x4C, 0x14, 0x6F, 0x78, 0x89, 0xBD, 0x91, 0xFB, 0xB3, 0x87, 0xFD, 0xCE, 0xF8, 0x98, 0x5D, 0x36, 0x0C, 0x4E, 0xDD, 0x37, 0x29, 0x80, 0x4C, 0x8C, 0xD6, 0x60, 0xFA, 0xF9, 0x29, 0x83, 0x91, 0xFB, 0x33, 0xC8, 0xB3, 0x25, 0x2C, 0xB9, 0x6C, 0xC3, 0xC7, 0x6C, 0xB3, 0x61, 0x70, 0x45, 0xD5, 0x74, 0x8D, 0x05, 0xBC, 0x4C, 0xBB, 0xF1, 0xE3, 0x6D, 0xF8, 0x70, 0x88, 0x34, 0x09, 0x60, 0x8C, 0x56, 0x65, 0x81, 0xC5, 0xE2, 0x0C, 0xB0, 0x5F, 0x59, 0x7F, 0xD3, 0x8E, 0x0F, 0xA7, 0x48, 0x93, 0x00, 0xCE, 0x69, 0xF8, 0x6C, 0xB5, 0x73, 0x2E, 0x71, 0x1F, 0x4E, 0x91, 0x26, 0x01, 0x9C, 0x8C, 0xF0, 0xD7, 0x6C, 0x3A, 0xA7, 0xF8, 0x73, 0xE2, 0x3E, 0x9C, 0xC2, 0xC6, 0x70, 0xB0, 0x2E, 0x7A, 0xC8, 0x29, 0xDB, 0x1B, 0x68, 0x06, 0xDA, 0xE8, 0x56, 0xEC, 0x93, 0xA3, 0x87, 0xDB, 0x12, 0xF6, 0xE1, 0x14, 0x69, 0x12, 0x40, 0xDF, 0xD4, 0x60, 0x6C, 0x10, 0x0D, 0x3C, 0xC7, 0x46, 0xA0, 0x83, 0x16, 0xC5, 0xDB, 0x73, 0x89, 0xBE, 0xC4, 0x7D, 0x38, 0x45, 0x9A, 0x4E, 0x01, 0xEA, 0xCF, 0x66, 0x33, 0x1B, 0x01, 0xD8, 0xC4, 0x16, 0xC5, 0x5E, 0xF9, 0x22, 0x56, 0x6C, 0xF8, 0x70, 0x8A, 0x34, 0x09, 0x40, 0xBD, 0x84, 0xCA, 0xE2, 0x80, 0x47, 0x41, 0xA8, 0xAF, 0xB9, 0xD9, 0xF0, 0xE1, 0x14, 0x69, 0x12, 0x80, 0xAB, 0x85, 0x5F, 0x4D, 0x59, 0xB1, 0x42, 0x9A, 0x04, 0xA0, 0xE7, 0x7A, 0x98, 0x8D, 0x6B, 0x6E, 0x06, 0xAF, 0xDC, 0xE9, 0x26, 0x4D, 0x02, 0x10, 0x0C, 0x20, 0x02, 0xF0, 0x1C, 0x11, 0x80, 0xE7, 0x88, 0x00, 0x3C, 0x47, 0x04, 0xE0, 0x39, 0x22, 0x00, 0xCF, 0x11, 0x01, 0x78, 0x8E, 0x08, 0xC0, 0x73, 0x44, 0x00, 0x9E, 0x23, 0x02, 0xF0, 0x1C, 0x11, 0x80, 0xE7, 0x88, 0x00, 0x3C, 0x27, 0x4D, 0x02, 0x90, 0xD1, 0x40, 0x03, 0xA4, 0x49, 0x00, 0x32, 0x1A, 0x68, 0x80, 0x34, 0x09, 0x40, 0x3D, 0x7D, 0xED, 0xFC, 0xD4, 0x23, 0xF5, 0x9C, 0x5C, 0x75, 0xD1, 0x15, 0x1B, 0x3E, 0x9C, 0x22, 0x4D, 0x02, 0x50, 0xAF, 0xAC, 0xD5, 0x46, 0x07, 0x00, 0x1D, 0xB4, 0x29, 0xF6, 0xCA, 0x14, 0xB1, 0x62, 0xC3, 0x87, 0x53, 0xA4, 0x69, 0x52, 0x68, 0x2D, 0xF3, 0x14, 0x53, 0x36, 0xBB, 0x69, 0x61, 0x0B, 0xD0, 0xCA, 0x1B, 0x0A, 0x1B, 0x73, 0xA9, 0x4D, 0xDC, 0x87, 0x53, 0xA4, 0x49, 0x00, 0xF5, 0x54, 0x29, 0xE7, 0xEC, 0x76, 0x2B, 0x27, 0x6B, 0x4F, 0x50, 0x4D, 0x7D, 0xE2, 0x3E, 0x9C, 0x22, 0x4D, 0xA7, 0x80, 0xFA, 0x08, 0x45, 0x1B, 0xA6, 0x53, 0x57, 0x54, 0x00, 0xE6, 0x7D, 0x38, 0x45, 0x9A, 0x04, 0xB0, 0x84, 0xA6, 0xD8, 0x36, 0x9A, 0x8A, 0xCC, 0xE7, 0xB5, 0xE1, 0xC3, 0x29, 0xD2, 0x24, 0x80, 0x0A, 0x65, 0xC1, 0xB6, 0x52, 0xA8, 0x61, 0x6B, 0x91, 0xD2, 0x8E, 0x36, 0x7C, 0x38, 0x45, 0x9A, 0x04, 0x00, 0x9B, 0xD9, 0x1C, 0xF3, 0xF8, 0xE2, 0x9F, 0x6F, 0x1B, 0x3E, 0x1C, 0x22, 0x5D, 0x15, 0x42, 0x16, 0xF2, 0x40, 0x09, 0x75, 0xFB, 0xC2, 0xA8, 0xE1, 0x41, 0x16, 0x3A, 0xE1, 0x63, 0xB6, 0xD9, 0x90, 0x0A, 0x21, 0x53, 0x6C, 0x63, 0x7B, 0xE4, 0xFE, 0x6C, 0x67, 0xAB, 0x33, 0x3E, 0x66, 0x97, 0x8D, 0x94, 0x56, 0x08, 0x51, 0x5F, 0x0F, 0xAB, 0x2C, 0xD1, 0x4A, 0x21, 0x0B, 0x78, 0x82, 0xC6, 0x48, 0x47, 0x36, 0xF2, 0x78, 0x89, 0x8B, 0x30, 0xDB, 0xF0, 0x31, 0x1D, 0x13, 0xB9, 0x2A, 0x09, 0x93, 0x02, 0x58, 0xA9, 0xAC, 0x7D, 0xB7, 0x32, 0xA2, 0xD5, 0x06, 0xBE, 0x1B, 0xE1, 0xAF, 0xDA, 0x0D, 0x3C, 0x45, 0x83, 0x53, 0x3E, 0x0A, 0x31, 0x93, 0xAB, 0x92, 0x30, 0x57, 0x28, 0x52, 0x55, 0xFD, 0xB2, 0x2E, 0x56, 0xF5, 0xCB, 0x7D, 0xB3, 0x7C, 0x7B, 0x6E, 0x60, 0x9F, 0x93, 0x3E, 0x6C, 0xE4, 0xAA, 0xD8, 0x66, 0xD0, 0xF4, 0x30, 0x8F, 0x86, 0x06, 0xF5, 0x28, 0x23, 0xB1, 0x6C, 0x1F, 0x08, 0xA8, 0xAC, 0x1D, 0x46, 0x63, 0xC4, 0x0A, 0x9E, 0x36, 0x7C, 0xD8, 0xC8, 0x55, 0x62, 0x02, 0xC8, 0xD3, 0x19, 0x52, 0x01, 0x7B, 0xBD, 0x06, 0x4D, 0x77, 0xD2, 0x52, 0xC2, 0x3F, 0xF6, 0x6A, 0x76, 0xC4, 0xF0, 0x65, 0xC3, 0x87, 0x8D, 0x5C, 0x25, 0x26, 0x80, 0x3C, 0x87, 0xD9, 0x10, 0x10, 0xD2, 0x61, 0x2D, 0xB6, 0x73, 0xEC, 0x61, 0x9B, 0xF1, 0xF5, 0x02, 0xCC, 0xFB, 0xB0, 0x91, 0xAB, 0xD0, 0x2D, 0x83, 0xE9, 0xD9, 0x2B, 0x5D, 0xFC, 0x88, 0x5F, 0x4F, 0xAD, 0x82, 0xB1, 0x8C, 0xBB, 0x79, 0x38, 0xF2, 0x4F, 0xA5, 0x99, 0x5C, 0xE0, 0x65, 0xF6, 0xD3, 0xCE, 0x29, 0x72, 0x5C, 0x22, 0x0F, 0x64, 0x98, 0x4B, 0xF5, 0xE4, 0x6A, 0x1E, 0x9B, 0x34, 0xAD, 0x18, 0x62, 0xDE, 0x87, 0x8D, 0x5C, 0x05, 0x62, 0x5E, 0x00, 0x30, 0xC2, 0x5B, 0x53, 0xEB, 0xE0, 0xAC, 0xE7, 0xE3, 0xDA, 0x47, 0x20, 0xC7, 0x38, 0x5F, 0xB0, 0x9E, 0xCF, 0xB5, 0xAC, 0xA2, 0x9E, 0xC5, 0x9A, 0xD7, 0x0C, 0x32, 0xEF, 0xC3, 0x46, 0xAE, 0x66, 0x60, 0x43, 0x00, 0x82, 0xC3, 0xA4, 0x6B, 0x2C, 0x40, 0xD0, 0x8E, 0x08, 0xC0, 0x73, 0x44, 0x00, 0x9E, 0x23, 0x02, 0xF0, 0x1C, 0x11, 0x80, 0xE7, 0x88, 0x00, 0x3C, 0x47, 0x04, 0xE0, 0x39, 0x22, 0x00, 0xCF, 0x11, 0x01, 0x78, 0x8E, 0x08, 0xC0, 0x73, 0xB2, 0x8C, 0x27, 0xDD, 0x05, 0x21, 0x41, 0xC6, 0xB3, 0x5C, 0x4C, 0xBA, 0x0F, 0x42, 0x82, 0x5C, 0xCC, 0xC6, 0x5C, 0x23, 0x4B, 0x48, 0x37, 0x1F, 0x64, 0x39, 0x93, 0x74, 0x1F, 0x84, 0x04, 0x39, 0x93, 0xA5, 0x27, 0xE9, 0x3E, 0x08, 0x09, 0xF2, 0x56, 0x96, 0xA3, 0x69, 0x5A, 0xE6, 0x50, 0xD0, 0xCA, 0x18, 0xC7, 0xB2, 0xBC, 0x12, 0x69, 0xAD, 0x5B, 0xA1, 0x1C, 0xE8, 0xA7, 0x23, 0xCB, 0x51, 0x65, 0xB5, 0x0B, 0xA1, 0x9C, 0xE9, 0xE6, 0x58, 0x96, 0x3E, 0x65, 0xBD, 0x1B, 0xA1, 0x9C, 0x69, 0xE3, 0xBD, 0x2C, 0xF0, 0x92, 0xFC, 0x13, 0xF0, 0x92, 0x33, 0xFC, 0x66, 0xE2, 0x52, 0xF0, 0x11, 0x5E, 0x4C, 0xBA, 0x2F, 0x42, 0x02, 0xBC, 0xC8, 0x91, 0x09, 0x01, 0x8C, 0xB0, 0x8B, 0xDE, 0xA4, 0x7B, 0x23, 0x58, 0xA6, 0x97, 0x5D, 0x8C, 0x30, 0x39, 0xAF, 0xFD, 0x0C, 0x35, 0xDC, 0x91, 0xA6, 0xFA, 0x96, 0x42, 0x4C, 0xC6, 0xF9, 0x3E, 0xCF, 0x93, 0x67, 0xEA, 0xC6, 0x86, 0x6E, 0xD6, 0xB2, 0x3A, 0xE9, 0x5E, 0x09, 0xD6, 0xF8, 0x2D, 0x4F, 0x4E, 0x0C, 0x02, 0x5C, 0x16, 0xC0, 0x20, 0x6F, 0x72, 0x07, 0x4B, 0x92, 0xEE, 0x97, 0x60, 0x85, 0x37, 0xF8, 0xEA, 0xE5, 0x7A, 0x87, 0x57, 0x6E, 0x6D, 0x3A, 0xCD, 0xDB, 0xDC, 0x1E, 0xB3, 0x42, 0x96, 0x90, 0x06, 0xCE, 0xF2, 0x18, 0x87, 0x2E, 0x3F, 0xB9, 0xFA, 0xDE, 0xB6, 0x37, 0x38, 0xCB, 0x26, 0x91, 0x40, 0x99, 0x73, 0x96, 0x7F, 0x62, 0xF7, 0x95, 0xA7, 0x85, 0x37, 0x37, 0x1E, 0xA3, 0x87, 0x75, 0x72, 0x22, 0x28, 0x63, 0xDE, 0xE4, 0x6B, 0xEC, 0xB9, 0xFA, 0x7E, 0xD0, 0xE9, 0x77, 0xB7, 0x76, 0xF1, 0x5F, 0xAC, 0x64, 0x95, 0xFC, 0x23, 0x28, 0x43, 0xC6, 0x39, 0xC8, 0x3F, 0x72, 0xB0, 0xF0, 0xC5, 0x99, 0xB7, 0x37, 0x9F, 0xE6, 0x10, 0x03, 0xAC, 0x8E, 0x54, 0xED, 0x4E, 0x70, 0x97, 0x5E, 0xBE, 0xCF, 0x37, 0xE9, 0x9A, 0xFE, 0x72, 0xF0, 0x27, 0x3D, 0xC3, 0x06, 0xBE, 0xC4, 0x17, 0xB8, 0x2E, 0xE9, 0x5E, 0x0B, 0x5A, 0x38, 0xC3, 0x8B, 0xEC, 0xE2, 0xD5, 0xA0, 0xF9, 0x9F, 0xE1, 0x5F, 0xF5, 0xD7, 0xB0, 0x96, 0xBB, 0x68, 0xE6, 0x13, 0x7C, 0x34, 0x55, 0x45, 0xE5, 0x85, 0x2B, 0x8C, 0xD1, 0x4F, 0x37, 0x6D, 0xBC, 0xC4, 0x51, 0x46, 0x82, 0x77, 0x29, 0x76, 0xAE, 0xFF, 0x18, 0x37, 0xB2, 0x99, 0x5B, 0x59, 0xCD, 0x72, 0x6A, 0x98, 0x2F, 0xD3, 0xC8, 0x53, 0xC0, 0x38, 0x17, 0x19, 0xE0, 0x34, 0x3D, 0xBC, 0x4E, 0x07, 0x47, 0x78, 0x4F, 0xB5, 0xF3, 0x5F, 0x00, 0x63, 0xFD, 0xE7, 0xB4, 0x82, 0x48, 0x9A, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82];

#[derive(PartialEq)]
enum TextInputType {
    Dec,
    Hex,
    Bin,
    Text,
    IP,
    IoctlFamily,
    IoctlNumber,
    IoctlDir,
    IoctlSize,
}

#[derive(Default, NwgUi)]
pub struct FeelTheBasaApp {

    #[nwg_resource(source_bin: Some(&ICON))]
    icon: nwg::Icon,

    #[nwg_control(size: (400, 200), position: (300, 300), title: &format!("Feel the Basa by Acamol ({})", option_env!("CARGO_PKG_VERSION").unwrap()), icon: Some(&data.icon))]
    #[nwg_events( OnWindowClose: [FeelTheBasaApp::exit], OnKeyRelease: [FeelTheBasaApp::window_key_press(SELF, EVT_DATA)] )]
    window: nwg::Window,

    #[nwg_layout(parent: window, spacing: 1)]
    grid: nwg::GridLayout,

    #[nwg_control(text: "Dec:")]
    #[nwg_layout_item(layout: grid, row: 0, col: 0)]
    dec_label: nwg::Label,

    #[nwg_control(text: "Hex:")]
    #[nwg_layout_item(layout: grid, row: 0, col: 1)]
    hex_label: nwg::Label,

    #[nwg_control(text: "Text:")]
    #[nwg_layout_item(layout: grid, row: 0, col: 2)]
    text_label: nwg::Label,

    #[nwg_control(text: "IP:")]
    #[nwg_layout_item(layout: grid, row: 0, col: 3)]
    ip_label: nwg::Label,

    #[nwg_control(text: "0")]
    #[nwg_layout_item(layout: grid, row: 1, col: 0)]
    #[nwg_events( OnTextInput: [FeelTheBasaApp::dec_change], OnKeyRelease: [FeelTheBasaApp::window_key_press(SELF, EVT_DATA)] )]
    dec_edit: nwg::TextInput,

    #[nwg_control(text: "0")]
    #[nwg_layout_item(layout: grid, row: 1, col: 1)]
    #[nwg_events( OnTextInput: [FeelTheBasaApp::hex_change], OnKeyRelease: [FeelTheBasaApp::window_key_press(SELF, EVT_DATA)] )]
    hex_edit: nwg::TextInput,

    #[nwg_control(limit: 4)]
    #[nwg_layout_item(layout: grid, row: 1, col: 2)]
    #[nwg_events( OnTextInput: [FeelTheBasaApp::text_change], OnKeyRelease: [FeelTheBasaApp::window_key_press(SELF, EVT_DATA)] )]
    text_edit: nwg::TextInput,

    #[nwg_control(text: "0.0.0.0", limit: 15)]
    #[nwg_events( OnTextInput: [FeelTheBasaApp::ip_change], OnKeyRelease: [FeelTheBasaApp::window_key_press(SELF, EVT_DATA)] )]
    #[nwg_layout_item(layout: grid, row: 1, col: 3)]
    ip_edit: nwg::TextInput,

    #[nwg_control(text: "Bin:")]
    #[nwg_layout_item(layout: grid, row: 2, col: 0, col_span: 1)]
    bin_label: nwg::Label,

    #[nwg_control(text: "0", limit: 32)]
    #[nwg_layout_item(layout: grid, row: 3, col: 0, col_span: 4)]
    #[nwg_events( OnTextInput: [FeelTheBasaApp::bin_change], OnKeyRelease: [FeelTheBasaApp::window_key_press(SELF, EVT_DATA)] )]
    bin_edit: nwg::TextInput,

    #[nwg_control(text: "IOCTL", h_align: nwg::HTextAlign::Center)]
    #[nwg_layout_item(layout: grid, row: 5, col: 0, col_span: 4)]
    ioctl_label: nwg::Label,

    #[nwg_control(text: "Number:")]
    #[nwg_layout_item(layout: grid, row: 6, col: 0, col_span: 1)]
    ioctl_number_label: nwg::Label,

    #[nwg_control(text: "Family:")]
    #[nwg_layout_item(layout: grid, row: 6, col: 1, col_span: 1)]
    ioctl_type_label: nwg::Label,

    #[nwg_control(text: "Size:")]
    #[nwg_layout_item(layout: grid, row: 6, col: 2, col_span: 1)]
    ioctl_size_label: nwg::Label,

    #[nwg_control(text: "Dir:")]
    #[nwg_layout_item(layout: grid, row: 6, col: 3, col_span: 1)]
    ioctl_dir_label: nwg::Label,

    #[nwg_control(text: "0", limit: 3)]
    #[nwg_layout_item(layout: grid, row: 7, col: 0, col_span: 1)]
    #[nwg_events( OnTextInput: [FeelTheBasaApp::number_change], OnKeyRelease: [FeelTheBasaApp::window_key_press(SELF, EVT_DATA)] )]
    ioctl_number_edit: nwg::TextInput,

    #[nwg_control()]
    #[nwg_layout_item(layout: grid, row: 7, col: 1, col_span: 1)]
    #[nwg_events( OnTextInput: [FeelTheBasaApp::family_change], OnKeyRelease: [FeelTheBasaApp::window_key_press(SELF, EVT_DATA)] )]
    ioctl_family_edit: nwg::TextInput,

    #[nwg_control(text: "0")]
    #[nwg_layout_item(layout: grid, row: 7, col: 2, col_span: 1)]
    #[nwg_events( OnTextInput: [FeelTheBasaApp::size_change], OnKeyRelease: [FeelTheBasaApp::window_key_press(SELF, EVT_DATA)] )]
    ioctl_size_edit: nwg::TextInput,

    #[nwg_control(text: "0")]
    #[nwg_layout_item(layout: grid, row: 7, col: 3, col_span: 1)]
    #[nwg_events( OnTextInput: [FeelTheBasaApp::dir_change], OnKeyRelease: [FeelTheBasaApp::window_key_press(SELF, EVT_DATA)] )]
    ioctl_dir_edit: nwg::TextInput,

    lock: Cell<bool>,
}

impl FeelTheBasaApp {
    const NRBITS: u32 = 8;
    const TYPEBITS: u32 = 8;
    const SIZEBITS: u32 = 14;
    const DIRBITS: u32 = 2;
    const NRMASK: u32 = (1 << FeelTheBasaApp::NRBITS) - 1;
    const TYPEMASK: u32 = (1 << FeelTheBasaApp::TYPEBITS) - 1;
    const SIZEMASK: u32 = (1 << FeelTheBasaApp::SIZEBITS) - 1;
    const DIRMASK: u32 = (1 << FeelTheBasaApp::DIRBITS) -1;
    const NRSHIFT: u32 = 0;
    const TYPESHIFT: u32 = FeelTheBasaApp::NRSHIFT + FeelTheBasaApp::NRBITS;
    const SIZESHIFT: u32 = FeelTheBasaApp::TYPEBITS + FeelTheBasaApp::TYPEBITS;
    const DIRSHIFT: u32 = FeelTheBasaApp::SIZESHIFT + FeelTheBasaApp::SIZEBITS;

    fn refresh_value_by_dec(&self, dec: u32, tip: TextInputType) {
        self.lock.set(true);
        let bytes = dec.to_be_bytes();

        if tip != TextInputType::Dec {
            self.dec_edit.set_text(&format!("{}", dec));
        }

        if tip != TextInputType::Bin {
            self.bin_edit.set_text(&format!("{:b}", dec));
        }

        if tip != TextInputType::Hex {
            self.hex_edit.set_text(&format!("{:X}", dec));
        }

        if tip != TextInputType::Text {
            self.text_edit.set_text(&bytes.iter().filter(|&&c| c != 0).map(|&c| c as char).collect::<String>());
        }

        if tip != TextInputType::IP {
            self.ip_edit.set_text(&format!("{}.{}.{}.{}", bytes[0], bytes[1], bytes[2], bytes[3]));
        }

        if tip != TextInputType::IoctlNumber {
            self.ioctl_number_edit.set_text(&format!("{}", (dec >> FeelTheBasaApp::NRSHIFT) & FeelTheBasaApp::NRMASK));
        }

        if tip != TextInputType::IoctlFamily {
            self.ioctl_family_edit.set_text(&format!("{}", ((dec >> FeelTheBasaApp::TYPESHIFT) & FeelTheBasaApp::TYPEMASK) as u8 as char));
        }
        
        if tip != TextInputType::IoctlSize {
            self.ioctl_size_edit.set_text(&format!("{}", (dec >> FeelTheBasaApp::SIZESHIFT) & FeelTheBasaApp::SIZEMASK));
        }

        if tip != TextInputType::IoctlDir {
            let dir = match (dec >> FeelTheBasaApp::DIRSHIFT) & FeelTheBasaApp::DIRMASK {
                0b0 => "None0",
                0b1 => "None1",
                0b10 => "Read",
                0b11 => "Write",
                _ => "ERROR"
            };
            self.ioctl_dir_edit.set_text(dir);
        }

        self.lock.set(false);
    }

    fn ip_change(&self) {
        if self.lock.get() {
            return;
        }

        let to = self.ip_edit.text();
        let t: Vec<&str> = to.split(".").collect();
        if t.len() != 4 || t.iter().any(|x| x.is_empty() || x.chars().any(|y| !y.is_numeric()) || x.parse::<i32>().unwrap() > 255) {
            return;
        }

        let ip: [u8; 4] = [t[3].parse().unwrap(), t[2].parse().unwrap(), t[1].parse().unwrap(), t[0].parse().unwrap()];
        let dec = u32::from_ne_bytes(ip);
        self.refresh_value_by_dec(dec, TextInputType::IP);
    }

    fn bin_change(&self) {
        if self.lock.get() {
            return;
        }

        let bin_str = &self.bin_edit.text();
        if bin_str.chars().any(|x| x != '0' && x != '1') {
            return;
        }

        if let Ok(r) = u32::from_str_radix(bin_str, 2) {
            self.refresh_value_by_dec(r, TextInputType::Bin);
        }
    }

    fn hex_change(&self) {
        if self.lock.get() {
            return;
        }

        let s = &self.hex_edit.text().to_uppercase();
        if s.chars().any(|c| (c < '0' || c > '9') && (c < 'A' || c > 'F')) {
            return;
        }

        if let Ok(r) = u32::from_str_radix(s, 16) {
            self.refresh_value_by_dec(r, TextInputType::Hex);
        }
    }

    fn dec_change(&self) {
        if self.lock.get() {
            return;
        }

        let s = &self.dec_edit.text();
        if s.chars().any(|c| c < '0' || c > '9') {
            return;
        }

        if let Ok(r) = u32::from_str_radix(s, 10) {
            self.refresh_value_by_dec(r, TextInputType::Dec);
        }
    }

    fn text_change(&self) {
        if self.lock.get() {
            return;
        }

        let s = &self.text_edit.text();
        if s.len() > 4 {
            return;
        }

        let mut bytes = s.bytes().collect::<VecDeque<_>>();
        while bytes.len() < 4 {
            bytes.push_front(0u8)
        }
        let b = [bytes[3], bytes[2], bytes[1], bytes[0]];
        let dec = u32::from_ne_bytes(b);
        self.refresh_value_by_dec(dec, TextInputType::Text);
    }

    fn dir_change(&self) {
        if self.lock.get() {
            return;
        }

        let s: &str = &self.ioctl_dir_edit.text();
        let dir_r = match &s.to_uppercase()[..] {
            "NONE0" => 0b0,
            "NONE1" | "NONE" => 0b1,
            "READ" => 0b10,
            "WRITE" => 0b11,
            _ => return
        };
        let dirbits = dir_r << FeelTheBasaApp::DIRSHIFT;
        let mask = !(FeelTheBasaApp::DIRMASK << FeelTheBasaApp::DIRSHIFT);

        let dec = self.dec_edit.text().parse::<u32>().unwrap() & mask | dirbits;
        self.refresh_value_by_dec(dec, TextInputType::IoctlDir);
    }
    
    fn number_change(&self) {
        if self.lock.get() {
            return;
        }

        let s = &self.ioctl_number_edit.text();
        let number = match s.parse::<u32>() {
            Ok(r @ 0..=255) => r,
            _ => return
        };
        let nrbits = number << FeelTheBasaApp::NRSHIFT;
        let mask = !(FeelTheBasaApp::NRMASK << FeelTheBasaApp::NRSHIFT);

        let dec = self.dec_edit.text().parse::<u32>().unwrap() & mask | nrbits;
        self.refresh_value_by_dec(dec, TextInputType::IoctlNumber);
    }

    fn family_change(&self) {
        if self.lock.get() {
            return;
        }

        let s = &self.ioctl_family_edit.text();
        if s.len() != 1 {
            return
        }

        let b = s.chars().next().unwrap() as u32;

        let typebits = b << FeelTheBasaApp::TYPESHIFT;
        let mask = !(FeelTheBasaApp::TYPEMASK << FeelTheBasaApp::TYPESHIFT);

        let dec = self.dec_edit.text().parse::<u32>().unwrap() & mask | typebits;
        self.refresh_value_by_dec(dec, TextInputType::IoctlFamily);
    }

    fn size_change(&self) {
        if self.lock.get() {
            return;
        }

        let s = &self.ioctl_size_edit.text();
        let size = match s.parse::<u32>() {
            Ok(r @ 0..=FeelTheBasaApp::SIZEMASK) => r,
            _ => return
        };

        let sizebits = size << FeelTheBasaApp::SIZESHIFT;
        let mask = !(FeelTheBasaApp::SIZEMASK << FeelTheBasaApp::SIZESHIFT);

        let dec = self.dec_edit.text().parse::<u32>().unwrap() & mask | sizebits;
        self.refresh_value_by_dec(dec, TextInputType::IoctlSize);
    }

    fn exit(&self) {
        nwg::stop_thread_dispatch();
    }

    fn window_key_press(&self, ent_data: &nwg::EventData) {
        match ent_data.on_key() {
            nwg::keys::ESCAPE => self.window.close(),
            _ => ()
        }
    }
}

fn main() {
    nwg::init().expect("Failed to init Native Windows GUI");
    let mut font = nwg::Font::default();
    nwg::Font::builder().family("Segoe UI").size(18).build(&mut font).expect("Failed to set default font");
    nwg::Font::set_global_default(Some(font));
    let _app = FeelTheBasaApp::build_ui(Default::default()).expect("Failed to build UI");
    nwg::dispatch_thread_events();
}
